import com.fieldju.gradle.plugins.lambdasam.tasks.MultiRegionPackageAndDeploySamTask

version '1.0.0'

shadowJar {
    baseName = 'cerberus-artemis-kpi-lambda'
    classifier = null
}

dependencies {
    // Lambda logger impl
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version: '1.0.0'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '1.3.0'

    compile group: 'com.amazonaws', name: 'aws-java-sdk-kinesis', version: '1.11.109'

    // Groovy stuffs
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'

    testCompile 'junit:junit:4.12'
}

task deploy(type: MultiRegionPackageAndDeploySamTask) {
    regions = "${project.'cerberus.metric_topic_regions'}".split(/,/)
    stackName = "${project.name}"
    templatePath = "${project.projectDir}${File.separator}sam.yaml"
    // convert 'foo:bar,key:value' string into a Map<String, String>
    regionToS3BucketMap = project.'cerberus.lambda_uploads_region_buckets'.split(/,/).collectEntries {
        def kv = it.split(/:/); return [ "${kv[0]}": kv[1] ]
    }
    tokenArtifactMap = [
            '@@CODE_URI@@': "${project.buildDir}${File.separator}libs${File.separator}${project.getName()}-${version}.jar"
    ]
    parameterOverrides = [
            ArtemisStreamName: "${project.'artemis.kinesis_stream_name'}",
            ArtemisStreamRegion: "${project.'artemis.kinesis_stream_region'}",
            CerberusKey: "${project.'artemis.cerberus_key'}"
    ]
}

tasks.deploy.dependsOn 'shadowJar'