group 'com.nike'
version '1.0.0'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

apply plugin: 'java'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoHtml"
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/com/nike/cerberus/lambda/waf/CloudFrontLogEvent*'
            ])
        })
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

shadowJar {
    baseName = 'cerberus-cloudfront-lambda'
    classifier = null
    version = null
}

tasks.assemble.finalizedBy shadowJar

tasks.check.dependsOn jacocoTestReport

dependencies {
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.1.0'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version: '1.0.0'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '1.3.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cloudformation', version: '1.11.37'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.3'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-net', name: 'commons-net', version: '3.5'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-waf', version: '1.11.39'
    compile group: 'com.fieldju', name: 'slack-client', version: '2.0.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    // copy the needed props to the int tests
    systemProperties = [
            arn: System.getProperty('arn'),
            bucketName: System.getProperty('bucketName'),
            logKey: System.getProperty('logKey')
    ]
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    testLogging {
        events "passed", "skipped", "failed"
    }
}