group 'com.nike'

buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

subprojects {
    apply plugin: 'java'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.7.6.201602180812"
        reportsDir = file("$buildDir/reports")
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.destination "${buildDir}/reports/jacocoHtml"
            xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/com/nike/cerberus/lambda/waf/CloudFrontLogEvent*'
                ])
            })
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath

        // copy the needed props to the int tests
        systemProperties = [
                arn: System.getProperty('arn'),
                bucketName: System.getProperty('bucketName'),
                logKey: System.getProperty('logKey')
        ]
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

